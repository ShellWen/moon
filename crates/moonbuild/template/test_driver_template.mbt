// Generated by moon test.

fn catch_exception[A](body : A, on_exn : A) -> A = "%control.catch"

fn check_panic[A, B, E: Error](
  f : () -> A!E,
  does_panic : () -> B!E,
  no_panic : () -> B!E
) -> B!E {
  catch_exception(
    {
      f!() |> ignore
      no_panic!()
    },
    does_panic!(),
  )
}

fn startswith_panic(s : String) -> Bool {
  s.length() >= 5 && s[0] == 'p' && s[1] == 'a' && s[2] == 'n' && s[3] == 'i' &&
  s[4] == 'c'
}

fn typing_tests(
  x : Map[
    String,
    @moonbitlang/core/builtin.Array[
      (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
    ],
  ]
) -> Unit {
  ignore(x)
}

fn main {
  let tests = abort("")
  typing_tests(tests)
  // let args = get_cli_args()
  // let index_filter = parse_int_(args.pop().unwrap())
  // let file_filter = args.pop().unwrap()
  // println(file_filter)
  // println(index_filter)
  let file_filter = get_file_name()
  let index_filter = parse_int_(get_index())
  // println(file_filter)
  // println(index_filter)
  let file_filtered_tests = (file_filter, tests.get(file_filter).unwrap())
  if index_filter >= file_filtered_tests.1.length() {
    return
  }
  let index_filtered_test = file_filtered_tests.1[index_filter]
  let test_block_name = match index_filtered_test.1.get(0) {
    Some(name) => name
    None => "anonymous test"
  }
  
  let test_block_func = index_filtered_test.0
  let mut messages = ""
  try {
    if startswith_panic(test_block_name) {
      check_panic!(
        test_block_func,
        fn() { () },
        fn() { raise Failure("panic is expected") },
      )
    } else {
      test_block_func!()
    }
  } catch {
    Failure(e) | InspectError(e) => messages = e
    _ => messages = "unexpected error"
  }

  fn repr(obj : String) -> String {
    let buf = @moonbitlang/core/builtin.Buffer::new(size_hint=16)
    Show::output(obj, buf)
    buf.to_string()
  }

  let filename = repr(file_filter)
  let test_name = repr(test_block_name)
  let message = repr(messages)
  println("{begin_moontest}")
  println(
    "{\"package\": \"{package}\", \"filename\": \{filename}, \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  println("{end_moontest}")
}

fn parse_int_(s : String) -> Int {
  let mut res = 0
  let len = s.length()
  for i = 0; i < len; i = i + 1 {
    res = res * 10 + (s[i].to_int() - '0'.to_int())
  }
  res
}

// get_cli_args begin
fn get_cli_args() -> Array[String] {
  Array::make(1, "template")
}
// get_cli_args end
